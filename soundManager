#==============================================================================
# 
# BKB extentions - Sound Manager
# -- Last Updated: 1-3-2017
# -- Author: Kyle Bryant
# 
#==============================================================================
$imported = {} if $imported.nil?
$imported["BKB-SoundManager"] = true
#==============================================================================
# Updates
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# 10.12.2014 - Started and Finished Script.
#==============================================================================
# Introduction
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# This script provides a common repository of all game sounds, to prevent you
# from creating a new sound and having to hunt down every single time you used 
# the old one.
#
#==============================================================================
# Instructions
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Paste script below 'Materials' but above 'Main'. Remember to save.
#
# play sound
#   play_sound(name, volume=100, pitch=100) 
# play music
#   play_music(name, volume=100, pitch=100)
#
# Use the code rather than WYSIWYG if sound/music is in flux in your project.
# For example, it is much easier to create a hash with 'step1' and 'step2' two
# sounds. Later decide you want a single step sound so you point both to the
# same sound, only to later relize you do want two sounds. Much easier than
# going through all the events and places in RPG Maker and changing sound
# values.
#==============================================================================
# Compatibility
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# This script is made strictly for RPG Maker VX Ace, due to the calls to the 
# RPGVX sound players, but you could tweak that to work with other things. :)
#==============================================================================


#==============================================================================
# Configuration
#==============================================================================

module BKB
  module SOUND_MANAGER
    DEBUG = true 
    SOUND_HASH = {
      "key" => "sound_file"
    }
    MUSIC_HASH = {
      "key" => "music_file"
    }
  end
end
#==============================================================================
# Editing anything past this point may potentially be very dangerous to your
# project's stability and very existence. DO NOT ATTEMPT... That is unless you
# know what you are doing, then please go right ahead and muck about in my code.
# Just be sure to give me credit for the base and don't mock my flaws. The code
# is very sensitive about its self image. May the segfaults never find you.
#==============================================================================
# Licensing + Legal
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Sound Manager by Kyle Bryant is licensed under a Creative Commons 
# Attribution-ShareAlike 4.0 International License.
# The above ^^^ MUST appear in your usage and/or modifications of this work
# This work is free to use for any project, but please credit me somewhere
# (somewhere viable is preferred),  and let me know what you used this script for
# on twitter @segFaultOnLine1 so I can get hyped about it as well!
# Donations are always appreciated, such as cookies or a copy of your game.
# Good luck and happy development!
#==============================================================================
# ! BKB extensions - Sound Manager
#==============================================================================


#==============================================================================
# ** Teh Code
#==============================================================================
class Game_Interpreter
  
  alias bkb_sounder_game_interperter_initialize initialize
  def initialize(depth = 0)
    bkb_sounder_game_interperter_initialize
    @soundCache = BKB::SOUND_MANAGER::SOUND_HASH
    @musicCache = BKB::SOUND_MANAGER::MUSIC_HASH
    @debugSounds = BKB::SOUND_MANAGER::DEBUG
    @debugMessage = "%ss: Playing %s '%s' at %d volume with pitch %s"
  end
  
  def play_sound(name, volume=100, pitch=100)
    name = @soundCache[name] || @soundCache[name.downcase!] || name
    return if name.to_s == ''
    puts @debugMessage % [$game_system.playtime.to_s, "sound", name, volume.to_s, pitch.to_s] if @debugSounds
    RPG::SE.new(name, volume, pitch).play
    puts $game_system.playtime.class
  end
  
  def play_music(name, volume=100, pitch=100)
    name = @musicCache[name] || @musicCache[name.downcase!] || name
    return if name.to_s == ''
    puts @debugMessage % [$game_system.playtime.to_s, "music", name, volume.to_s, pitch.to_s] if @debugSounds
    RPG::BGM.new(name, volume, pitch).play
  end

end
